//
//  CampusMapViewController.swift
//  MackTIA
//
//  Created by Joaquim Pessoa Filho on 19/08/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit
import Polyline
import GoogleMaps


class CampusMapViewController: UIViewController {
    
    @IBOutlet weak var mapView: GMSMapView!
    
    let locationManager = CLLocationManager()
    var locValue: CLLocationCoordinate2D?
    var retryDestination: CLLocationCoordinate2D?
    let centerCoordinate = CLLocationCoordinate2D(latitude: CLLocationDegrees(-23.546954), longitude: CLLocationDegrees(-46.651796))
    var routeOverlay: GMSPolyline?
    
    
    var flag = false
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
        self.locationManager.delegate = self
        let authstate = CLLocationManager.authorizationStatus()
        if(authstate == CLAuthorizationStatus.NotDetermined){
            print("Not Authorised")
            locationManager.requestWhenInUseAuthorization()
        }
        
        mapView.tintColor = UIColor.redColor()
        mapView.myLocationEnabled = true
        mapView.delegate = self
        
        
        loadPinAnnotations()
        loadRegions()
        
    }
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        self.locationManager.startUpdatingLocation()
    }
    
    override func viewWillDisappear(animated: Bool) {
        super.viewWillDisappear(animated)
        self.locationManager.stopUpdatingLocation()
    }
    
    // MARK: Event handling
    
    func loadPinAnnotations() {
        
        let filePath = NSBundle.mainBundle().pathForResource("CampusMap", ofType: "plist")
        let properties = NSArray(contentsOfFile: filePath!)
        
        mapView.camera = GMSCameraPosition.cameraWithTarget(self.centerCoordinate, zoom: 18)
        
        // Add Map Annotation
        for item in properties! {
            if let newPinData = item as? Dictionary<String,String>{
                let point = CGPointFromString(newPinData["location"]!)
                let coordinate = CLLocationCoordinate2D(latitude: CLLocationDegrees(point.x), longitude: CLLocationDegrees(point.y))
                
                let img =  UIImage(named: "pin")!.insertText(text: newPinData["number"]!, size: 16.0, offset: 0.2, color: UIColor(hex: newPinData["color"]!))
                
                let marker = GMSMarker(position: coordinate)
                marker.title = newPinData["name"]
                marker.snippet = newPinData["buildName"]
                marker.icon = img
                marker.map = mapView
            }
        }
    }
    
    func loadRegions() {
        
        let filePath = NSBundle.mainBundle().pathForResource("CampusMapRegions", ofType: "plist")
        let properties = NSArray(contentsOfFile: filePath!)
        
        // Add Map Annotation
        // to create encoded polyline: https://google-developers.appspot.com/maps/documentation/utilities/polyline-utility/polylineutility
        
        for item in properties! {
            if let newPinData = item as? [String: String] {
                let path = GMSMutablePath(fromEncodedPath: newPinData["polylineString"]!)
                let polygon = GMSPolygon(path: path)
                polygon.title = newPinData["name"]
                polygon.fillColor = UIColor(hex: newPinData["color"]!).colorWithAlphaComponent(0.5)
                polygon.map = mapView
                
            }
        }
    }
    
    func traceRouteTo(buildNumber buildNumber: String) {
        let filePath = NSBundle.mainBundle().pathForResource("CampusMap", ofType: "plist")
        let buildNameFormatted = String(Int(buildNumber) ?? 0)
        let properties = NSArray(contentsOfFile: filePath!) as! [[String: String]]
        if let destination = properties.filter({$0["number"] == buildNameFormatted}).first {
            let point = CGPointFromString(destination["location"]!)
            let coordinate = CLLocationCoordinate2D(latitude: CLLocationDegrees(point.x), longitude: CLLocationDegrees(point.y))
            traceRouteTo(coordinate: coordinate)
        } else {
            let alert = UIAlertController(title: NSLocalizedString("campusmap_errorBuildNotFoundTitle", comment: "Too far away"), message: String(format: NSLocalizedString("campusmap_errorBuildNotFoundMessage", comment: "Too far away"), buildNumber), preferredStyle: .Alert)
            alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
            self.presentViewController(alert, animated: true, completion: nil)
        }
    }
    
    func traceRouteTo(coordinate destination: CLLocationCoordinate2D) {
        if let origin = locValue {
            if CLLocation(location: origin).distanceFromLocation(CLLocation(location: destination)) > 3000 {
                let alert = UIAlertController(title: NSLocalizedString("campusmap_errorTooFarAwayTitle", comment: "Too far away"), message: NSLocalizedString("campusmap_errorTooFarAwayMessage", comment: "Too far away"), preferredStyle: .Alert)
                alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                self.presentViewController(alert, animated: true, completion: nil)
                return
            }
            DirectionsAPI.sharedInstance.getPolyline(origin, destination: destination) { [weak self] (polylineEncoded, error) in
                
                guard polylineEncoded != nil else {
                    print(#function, "Problema ao obter a rota")
                    return
                }
                
                let path = GMSPath(fromEncodedPath: polylineEncoded!)
                
                if self?.routeOverlay == nil {
                    self?.routeOverlay = GMSPolyline(path: path)
                } else {
                    self?.routeOverlay?.path = path
                }
                
                guard let polyline = self?.routeOverlay else {
                    return
                }
                
                //                polyline.strokeColor = UIColor.redColor().colorWithAlphaComponent(0.5)
                polyline.strokeWidth = 3
                let styles = [GMSStrokeStyle.solidColor(UIColor.redColor().colorWithAlphaComponent(0.6)), GMSStrokeStyle.solidColor(UIColor.clearColor())]
                let lengths = [1,2]
                polyline.spans = GMSStyleSpans(polyline.path!, styles, lengths, kGMSLengthRhumb)
                
                polyline.map = self?.mapView
            }
        } else {
            retryDestination = destination
        }
    }
    
}

// MARK: - Map View delegate

extension CampusMapViewController: GMSMapViewDelegate, CLLocationManagerDelegate {
    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let location = locations.first {
            self.locValue = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
            
            if retryDestination != nil {
                traceRouteTo(coordinate: retryDestination!)
                retryDestination = nil
            }

        }
    }
    
    func mapView(mapView: GMSMapView, didTapMarker marker: GMSMarker) -> Bool {
        self.traceRouteTo(coordinate: marker.position)
        return true
    }
    
    func mapView(mapView: GMSMapView, didChangeCameraPosition position: GMSCameraPosition) {
        if flag {
            flag = false
            return
        }
        
        let centerLocation = CLLocation(location: self.centerCoordinate)
        let centerMapView = CLLocation(location: mapView.camera.target)

        if centerLocation.distanceFromLocation(centerMapView) > 650.00 {
            
            mapView.animateToCameraPosition(GMSCameraPosition.cameraWithTarget(self.centerCoordinate, zoom: 18))
            flag = true
        }
        
    }
}