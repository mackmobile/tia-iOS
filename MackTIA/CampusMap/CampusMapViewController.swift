//
//  CampusMapViewController.swift
//  MackTIA
//
//  Created by Joaquim Pessoa Filho on 19/08/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit
import Polyline



class CampusMapViewController: UIViewController {
    @IBOutlet weak var mapView: MKMapView!
    let locationManager = CLLocationManager()
    var locValue: CLLocationCoordinate2D?
    let centerCoordinate = CLLocationCoordinate2D(latitude: CLLocationDegrees(-23.546954), longitude: CLLocationDegrees(-46.651796))
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
        let authstate = CLLocationManager.authorizationStatus()
        if(authstate == CLAuthorizationStatus.NotDetermined){
            print("Not Authorised")
            locationManager.requestWhenInUseAuthorization()
        }
        
        loadPinAnnotations()
    }
    
    // MARK: Event handling
    
    func loadPinAnnotations() {
        
        let filePath = NSBundle.mainBundle().pathForResource("CampusMap", ofType: "plist")
        let properties = NSArray(contentsOfFile: filePath!)
        
        // Set MapView Region
        // -23.546954, -46.651796
        let region = MKCoordinateRegionMakeWithDistance(centerCoordinate, 600, 600)
        mapView.setRegion(region, animated: false)
        
        // Add Map Annotation
        for item in properties! {
            if let newPinData = item as? Dictionary<String,String>{
                let point = CGPointFromString(newPinData["location"]!)
                let coordinate = CLLocationCoordinate2D(latitude: CLLocationDegrees(point.x), longitude: CLLocationDegrees(point.y))
                
                let annotation = CampusMapAnnotation(name: newPinData["name"]!, buildName: newPinData["buildName"]!, number: newPinData["number"]!, coordinate: coordinate, color: newPinData["color"]!)
                mapView.addAnnotation(annotation)
            }
        }
    }
}

// MARK: - Map View delegate

extension CampusMapViewController: MKMapViewDelegate {
    func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView? {
        
        guard let annotation = annotation as? CampusMapAnnotation else {
            print(#function, "Problem with CampusMapAnnotation NIB")
            return nil
        }
        
        let view = self.mapView.dequeueReusableAnnotationViewWithIdentifier("CampusMap") ?? MKAnnotationView(annotation: annotation, reuseIdentifier: "CampusMap")
        
        let img =  UIImage(named: "pin")!.insertText(text: annotation.number, size: 16.0, offset: 0.2, color: annotation.color)
        
        view.image = img
        view.enabled = true
        view.canShowCallout = true
        view.centerOffset = CGPoint(x: 0, y: -img.size.height/2)
        
        return view
    }
    
    func mapView(mapView: MKMapView, didSelectAnnotationView view: MKAnnotationView) {
        if let origin = locValue {
            let destination = view.annotation!.coordinate
            if CLLocation(location: origin).distanceFromLocation(CLLocation(location: destination)) > 3000 {
                let alert = UIAlertController(title: NSLocalizedString("campusmap_errorTooFarAwayTitle", comment: "Too far away"), message: NSLocalizedString("campusmap_errorTooFarAwayMessage", comment: "Too far away"), preferredStyle: .Alert)
                alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                self.presentViewController(alert, animated: true, completion: nil)
                return
            }
            DirectionsAPI.sharedInstance.getPolyline(origin, destination: view.annotation!.coordinate) { (polylineEncoded, error) in
                if (error == nil && polylineEncoded != nil) {
                    guard let coordinates: [CLLocationCoordinate2D] = decodePolyline(polylineEncoded!) else {
                        return
                    }
                    var waypoints = coordinates
                    waypoints.insert(origin, atIndex: 0)
                    waypoints.append(view.annotation!.coordinate)
                    let myPolyline = MKPolyline(coordinates: &waypoints, count: waypoints.count)
                    self.mapView.removeOverlays(self.mapView.overlays)
                    self.mapView.addOverlay(myPolyline)
                }
                
            }
        }
    }

    func mapView(mapView: MKMapView, rendererForOverlay overlay: MKOverlay) -> MKOverlayRenderer {
        if overlay is MKPolyline {
            let lineView = MKPolylineRenderer(overlay: overlay)
            lineView.strokeColor = UIColor.redColor()
            lineView.lineWidth = 2;
            
            return lineView
        }
        return MKPolylineRenderer()
    }
    
    func mapView(mapView: MKMapView, didUpdateUserLocation userLocation: MKUserLocation) {
        locValue = userLocation.coordinate
    }
    
    func mapView(mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        let centerLocation = CLLocation(location: centerCoordinate)
        let centerMapView = CLLocation(location: mapView.centerCoordinate)
        if mapView.camera.altitude > 1500.00 {
            let region = MKCoordinateRegionMakeWithDistance(centerMapView.coordinate, 600, 600)
            mapView.setRegion(region, animated: true)
        }
        if centerLocation.distanceFromLocation(centerMapView) > 600.00 {
            
            let span = mapView.region.span
            let region = MKCoordinateRegionMake(centerCoordinate, span)
            mapView.setRegion(region, animated: true)
        }
    }

}
